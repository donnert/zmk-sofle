#define ZMK_POINTING_DEFAULT_MOVE_VAL 600  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <1000>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

&lt {
    tapping-term-ms = <180>;  // LT의 tapping-term을 hm보다 짧게 설정
};

/ {
    //debounce-press-ms = <10>;
    // debounce-release-ms = <10>;

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    behaviors {
        lh_pht: left_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-unless-interrupted";
            tapping-term-ms = <100>;                        // <---[[produces tap if held longer than tapping-term-ms]]
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;
        };

        //hm: homerow_mods {
        //  compatible = "zmk,behavior-hold-tap";
        //#binding-cells = <2>;
        //tapping-term-ms = <150>;
        ////quick-tap-ms = <70>;
        //flavor = "tap-preferred";
        //bindings = <&kp>, <&kp>;
        //per-key-repeat = <1>;
        //};
        //hm: homerow_mods {
        //  compatible = "zmk,behavior-hold-tap";
        //  #binding-cells = <2>;
        //  bindings = <&kp>, <&kp>;
        //  flavor = "tap-preferred";
        //  tapping-term-ms = <300>;
        //  quick-tap-ms = <0>;
        //};

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "tap-preferred";
            tapping-term-ms = <170>;
            quick-tap-ms = <140>;

            //hold-trigger-key-positions = <15 16 17 18 31 32 33 34>;
            // 일단 제거
        };

        hmrs: hmrs {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            label = "HMRS";
        };
    };

    combos {
        compatible = "zmk,combos";

        copy {
            bindings = <&kp LC(C)>;
            key-positions = <42 41>;
        };

        paste {
            bindings = <&kp LC(V)>;
            key-positions = <42 43>;
        };

        rcopy {
            bindings = <&kp LC(C)>;
            key-positions = <49 48>;
        };

        rpaste {
            bindings = <&kp LC(V)>;
            key-positions = <47 48>;
        };

        language {
            bindings = <&kp CAPSLOCK>;
            key-positions = <28 29>;
        };

        spot {
            bindings = <&kp RG(SPACE)>;
            key-positions = <36 35 36>;
        };

        right-esc {
            bindings = <&kp ESCAPE>;
            key-positions = <22 23>;
        };

        rlanguage {
            bindings = <&kp CAPSLOCK>;
            key-positions = <35 36>;
        };

        esc {
            bindings = <&kp ESCAPE>;
            key-positions = <15 16>;
        };
    };

    macros {
        kvm1: kvm1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp KP_ASTERISK>,
                <&macro_press>,
                <&kp KP_NUMBER_1>,
                <&macro_release>,
                <&kp KP_ASTERISK>,
                <&macro_release>,
                <&kp KP_NUMBER_1>;

            label = "KVM1";
        };

        kvm2: kvm2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp KP_ASTERISK>,
                <&macro_press>,
                <&kp KP_NUMBER_2>,
                <&macro_release>,
                <&kp KP_ASTERISK>,
                <&macro_release>,
                <&kp KP_NUMBER_2>;

            label = "KVM2";
        };

        kvm3: kvm3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp KP_ASTERISK>,
                <&macro_press>,
                <&kp KP_NUMBER_3>,
                <&macro_release>,
                <&kp KP_ASTERISK>,
                <&macro_release>,
                <&kp KP_NUMBER_3>;

            label = "KVM3";
        };

        s1: s1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp S &kp A &kp M &kp S &kp U &kp N &kp G &kp N1 &kp EXCL>;
            label = "S1";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer0 {
            bindings = <
&kp ESC    &kp N1     &kp N2        &kp N3        &kp N4  &kp N5       &kp UP_ARROW     &kp N6     &kp N7  &kp N8     &kp N9           &kp N0      &kp BACKSPACE
&kp TAB    &kp Q      &kp W         &kp E         &kp R   &kp T        &kp DOWN_ARROW   &kp Y      &kp U   &kp I      &kp O            &kp P       &kp BSLH
&kp CAPS   &kp A      &kp S         &kp D         &kp F   &kp G        &kp LEFT_ARROW   &kp H      &kp J   &kp K      &kp L            &kp SEMI    &kp APOS
&kp LSHFT  &kp Z      &kp X         &kp C         &kp V   &kp B        &kp RIGHT_ARROW  &kp N      &kp M   &kp COMMA  &kp DOT          &kp FSLH    &kp RIGHT_SHIFT
&to 3      &kp LCTRL  &kp LEFT_GUI  &kp LEFT_ALT  &mo 1   &kp SPACE    &kp ENTER        &kp ENTER  &trans  &mo 2      &kp RIGHT_SHIFT  &kp DELETE
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
            display-name = "LAYER0";
        };

        layer_1 {
            bindings = <
&kp GRAVE   &kp F1           &kp F2          &kp F3           &kp F4           &kp F5             &mmv MOVE_UP     &kp F6           &kp F7           &kp F8      &kp F9     &kp F10           &trans
&trans      &kp GRAVE        &mkp LCLK       &mkp MCLK        &mkp RCLK        &mkp MB4           &mmv MOVE_DOWN   &kp PG_UP        &kp END          &kp UP      &kp HOME   &kp MINUS         &kp EQUAL
&trans      &kp TILDE        &trans          &trans           &trans           &mkp MB5           &mmv MOVE_LEFT   &kp PG_DN        &kp LEFT         &kp DOWN    &kp RIGHT  &kp LEFT_BRACKET  &kp RIGHT_BRACKET
&trans      &rgb_ug RGB_OFF  &rgb_ug RGB_ON  &rgb_ug RGB_EFF  &rgb_ug RGB_EFR  &rgb_ug RGB_SPI    &mmv MOVE_RIGHT  &rgb_ug RGB_BRI  &rgb_ug RGB_BRD  &kp INSERT  &kp F11    &kp F12           &trans
&kp C_MUTE  &trans           &trans          &trans           &trans           &trans             &mkp LCLK        &trans           &trans           &trans      &trans     &trans
            >;

            display-name = "layer1";
            sensor-bindings = <&scroll_encoder>;
        };

        layer_2 {
            bindings = <
&kp TILDE  &bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &mmv MOVE_UP     &kp F6  &kp F7  &kp F8      &kp F9     &kp F10      &trans
&trans     &bt BT_CLR    &bt BT_CLR_ALL  &trans        &trans        &trans          &mmv MOVE_DOWN   &trans  &trans  &kp F11     &kp F12    &kp UNDER    &kp PLUS
&trans     &out OUT_USB  &out OUT_BLE    &caps_word    &trans        &trans          &mmv MOVE_LEFT   &trans  &trans  &trans      &trans     &kp LBRC     &kp RBRC
&trans     &sys_reset    &trans          &bootloader   &trans        &trans          &mmv MOVE_RIGHT  &trans  &trans  &sys_reset  &soft_off  &bootloader  &trans
&trans     &trans        &trans          &trans        &trans        &trans          &mkp LCLK        &trans  &trans  &trans      &trans     &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        Default {
            display-name = "LAYER0";
            bindings = <
&kp ESCAPE          &kp N1          &kp N2          &kp N3        &kp N4          &kp N5       &kp LC(TAB)              &kp N6       &kp N7           &kp N8        &kp N9          &kp N0             &none
&none               &kp Q           &kp W           &kp E         &kp R           &kp T        &kp LC(TAB)              &kp Y        &kp U            &kp I         &kp O           &kp P              &kp BSLH
&hm LC(SPACE) CAPS  &hm LEFT_GUI A  &hm LEFT_ALT S  &hm LCTRL D   &hmrs LSHIFT F  &kp G        &kp LS(LC(GRAVE))        &kp H        &hmrs RSHIFT J   &hm LCTRL K   &hm LEFT_ALT L  &hm LEFT_GUI SEMI  &hm LC(SPACE) APOS
&kp LSHFT           &kp Z           &kp X           &kp C         &kp V           &kp B        &kp LC(GRAVE)            &kp N        &kp M            &kp COMMA     &kp DOT         &kp FSLH           &none
&to 0               &none           &none           &kp LEFT_ALT  &lt 5 SPACE     &lt 6 TAB    &mt LC(SPACE) LC(SPACE)  &lt 7 ENTER  &lt 4 BACKSPACE  &lt 6 DELETE  &kvm1           &kvm2
            >;

            sensor-bindings = <&inc_dec_kp LEFT_ALT LC(SPACE)>;
        };

        Num {
            bindings = <
&trans  &trans            &trans        &trans  &trans  &trans               &trans  &trans             &trans    &trans        &trans     &trans  &trans
&trans  &kp LEFT_BRACKET  &kp N7        &kp N8  &kp N9  &kp RIGHT_BRACKET    &trans  &kp LA(LS(SPACE))  &trans    &trans        &trans     &trans  &trans
&trans  &trans            &kp N4        &kp N5  &kp N6  &kp EQUAL            &trans  &kp LEFT_ARROW     &kp DOWN  &kp UP_ARROW  &kp RIGHT  &trans  &trans
&trans  &trans            &kp NUMBER_1  &kp N2  &kp N3  &trans               &trans  &trans             &trans    &trans        &trans     &trans  &trans
&trans  &trans            &trans        &trans  &kp N0  &kp UNDERSCORE       &trans  &trans             &trans    &trans        &trans     &trans
            >;
        };

        Nav {
            bindings = <
&trans  &rgb_ug RGB_COLOR_HSB(0,0,100)  &rgb_ug RGB_COLOR_HSB(70,98,50)  &rgb_ug RGB_COLOR_HSB(189,100,49)  &rgb_ug RGB_COLOR_HSB(109,100,50)  &rgb_ug RGB_COLOR_HSB(0,100,50)    &mmv MOVE_UP     &rgb_ug RGB_OFF  &rgb_ug RGB_ON  &rgb_ug RGB_EFF  &rgb_ug RGB_EFR  &rgb_ug RGB_HUD  &rgb_ug RGB_HUI
&trans  &trans                          &trans                           &trans                             &trans                             &trans                             &mmv MOVE_DOWN   &kp C_AC_PASTE   &msc SCRL_DOWN  &msc SCRL_UP     &kp C_AC_UNDO    &rgb_ug RGB_SAD  &rgb_ug RGB_SAI
&trans  &kp LEFT_GUI                    &kp LEFT_ALT                     &kp LCTRL                          &kp LEFT_SHIFT                     &kp LA(LS(SPACE))                  &mmv MOVE_LEFT   &kp LEFT_ARROW   &kp DOWN        &kp UP_ARROW     &kp RIGHT        &rgb_ug RGB_BRD  &rgb_ug RGB_BRI
&trans  &s1                             &kvm3                            &kvm2                              &kvm1                              &trans                             &mmv MOVE_RIGHT  &kp HOME         &kp PAGE_DOWN   &kp PAGE_UP      &kp END          &rgb_ug RGB_SPD  &rgb_ug RGB_SPI
&trans  &trans                          &trans                           &trans                             &trans                             &trans                             &mkp LCLK        &mkp RCLK        &kp BACKSPACE   &trans           &trans           &trans
            >;
        };

        Fun {
            bindings = <
&trans  &trans   &trans  &trans  &trans  &trans    &trans  &trans          &trans          &trans        &trans           &trans  &trans
&trans  &kp F12  &kp F7  &kp F8  &kp F9  &trans    &trans  &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_UP  &msc SCRL_RIGHT  &trans  &trans
&trans  &kp F11  &kp F4  &kp F5  &kp F6  &trans    &trans  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &trans  &trans
&trans  &kp F10  &kp F1  &kp F2  &kp F3  &trans    &trans  &trans          &trans          &trans        &trans           &trans  &trans
&trans  &trans   &trans  &trans  &trans  &trans    &trans  &mkp RCLK       &mkp LCLK       &trans        &trans           &trans
            >;
        };

        Sym {
            bindings = <
&trans  &trans          &trans           &trans                &trans                 &trans             &trans  &trans  &trans  &trans  &trans  &trans        &trans
&trans  &kp LEFT_BRACE  &kp AMPERSAND    &kp ASTERISK          &kp LEFT_PARENTHESIS   &kp RIGHT_BRACE    &trans  &trans  &trans  &trans  &trans  &trans        &trans
&trans  &trans          &kp DOLLAR       &kp PERCENT           &kp CARET              &kp PLUS           &trans  &trans  &trans  &trans  &trans  &trans        &trans
&trans  &kp TILDE       &kp EXCLAMATION  &kp AT_SIGN           &kp HASH               &trans             &trans  &trans  &trans  &trans  &trans  &kp QUESTION  &trans
&trans  &trans          &trans           &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp MINUS          &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
